[alias]
    # View the current status in the short format
    s = status --short --branch

    # View the short status and file info
    si = "!f() { \
        git -c color.status=always status --short | while IFS= read -r line; do \
            file=$(echo $line | awk '{print $2}'); \
            if [ -e \"$file\" ]; then \
                size=$(ls -lh \"$file\" | awk '{print $5}'); \
                printf \"%5s %s\\n\" \"$size\" \"$line\"; \
            else \
                printf \"%5s %s\\n\" \"\" \"$line\"; \
            fi; \
        done; \
    }; f"

    # branch
    b = branch

    # List all branches
    ba = branch --all

    # checkout
    co = checkout

    # Intent to add changes
    an = add . -N

    # Commit all changes using verbose commit
    ca = !git add -A && git commit -av

    # Show the diff between the last commit and current index.
    d = "!git diff --quiet HEAD -- || clear; git diff -p --stat HEAD"

    # `git di $n $options` shows the diff between the state of $n revisions ago and the current state.
    di = "!f() { git diff-index --quiet HEAD~$1 ${@:2} || clear; git diff -p --stat HEAD~$1 ${@:2}; }; f"

    # Show the staged diff between the last commit and current index.
    ds = "!git diff --staged --quiet HEAD -- || clear; git diff -p --stat --staged HEAD"

    # Fetch upstream and diff the current branch with its equivalent in the upstream.
    du = !git fetch upstream && git diff upstream/$(git branch --show-current)

    # Show logs in a graph and in oneline format
    l = log --pretty=oneline --graph --abbrev-commit

    # Show logs with summary of changed files
    ls = log --pretty=oneline --graph --abbrev-commit --stat

    # Show logs with all details (patch and stat)
    la = log -p --stat

    # Show the patch and stat from the last change only
    lal = log -p --stat -n 1

    # Show verbose about remotes
    remotes = remote --verbose

    # List aliases
    aliases = config --get-regexp alias

    # Clone a repository including all submodules.
    c = clone --recursive

    # Pull remote changes for the repo and submodules.
    p = pull --recurse-submodules

    # Show the user email.
    whoami = config user.email

[apply]
    # Detect whitespace errors when applying a patch.
    whitespace = fix

[commit]
    gpgsign = true

[gpg]
    format = ssh

[pull]
    rebase = true

[rebase]
    autoStash = true
